---
kind: pipeline
type: docker
name: "build image"

volumes:
  - name: cache
    temp: { }
  - name: dockersock
    temp: { }

trigger:
  event:
    - tag

environment:
  GCLOUD_CLI_VERSION: 387.0.0
  CLOUDSDK_CONFIG: /cache/gcloud/config
  
  GCR_HOST: gcr.io
  PROJECT_ID: forestvpn
  IMAGE_NAME: cloud-vision

services:
  - name: docker
    image: docker:20.10.16-dind-alpine3.15
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

steps:
  - name: setup
    image: alpine:3.15
    volumes:
      - name: cache
        path: /cache
    commands:
      - echo $${DRONE_TAG:-$${DRONE_COMMIT:0:8}} > /cache/.build_version
      - echo $${GCR_HOST}/$${PROJECT_ID}/$${IMAGE_NAME}:`cat /cache/.build_version` > /cache/.image_tag
  
  - name: docker ready
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache docker
      - |
        until docker info > /dev/null 2>&1; do
          echo "Docker is not ready, sleep 1 second"
          sleep 1
        done

  - name: setup gcloud
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
      - name: cache
        path: /cache
    environment:
      GCLOUD_CREDENTIALS:
        from_secret: GCLOUD_CREDENTIALS
    commands:
      - mkdir -p $${CLOUDSDK_CONFIG}
      - apk add --no-cache curl python3 docker rsync
      - curl -L -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-$${GCLOUD_CLI_VERSION}-linux-x86_64.tar.gz
      - tar -xf google-cloud-cli-$${GCLOUD_CLI_VERSION}-linux-x86_64.tar.gz -C /cache/
      - /cache/google-cloud-sdk/install.sh -q --usage-reporting=false --screen-reader=false
      - export PATH=/cache/google-cloud-sdk/bin:$PATH
      - echo $GCLOUD_CREDENTIALS > gcloud_credentials.json
      - gcloud auth login --no-browser --cred-file gcloud_credentials.json --project $PROJECT_ID --quiet
      - gcloud auth configure-docker --quiet $${OCI_HOST},$${GCR_HOST}
      - rsync -a ~/.docker/ /cache/.docker
  
  - name: build image
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
      - name: cache
        path: /cache
    commands:
      - apk add --no-cache docker
      - docker build --build-arg ENVIRONMENT=production -t `cat /cache/.image_tag` .
    depends_on:
      - setup
      - docker ready
  
  - name: publish image
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
      - name: cache
        path: /cache
    commands:
      - export PATH=/cache/google-cloud-sdk/bin:$PATH
      - apk add --no-cache curl python3 docker rsync
      - /cache/google-cloud-sdk/install.sh -q --usage-reporting=false --screen-reader=false
      - rsync -a /cache/.docker/ ~/.docker
      - docker push `cat /cache/.image_tag`
    depends_on:
      - setup
      - setup gcloud
      - build image
  
  - name: slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: SLACK_RELEASE_WEBHOOK
      link_names: true
      icon_url: https://unsplash.it/256/256/?random
      template: >
        {{#success build.status}}
          ✔ Production docker image <{{ build.link }}| {{ repo.owner }}/{{ repo.name }}:{{ build.tag }} ↗> publish is succeed!! Thanks @{{build.author}}
        {{else}}
         :x: Production docker image <{{ build.link }}| {{ repo.owner }}/{{ repo.name }}:{{ build.tag }} ↗> publish is failed! Blame @{{build.author}}
        {{/success}}
    when:
      status: [ success, failure ]
    depends_on:
      - publish image

---
kind: pipeline
type: docker
name: "deploy: prod"

volumes:
  - name: cache
    temp: { }
  - name: dockersock
    temp: { }

trigger:
  event:
    - promote
  target:
    - prod

environment:
  K8S_VERSION: 1.24.1
  K8S_NAMESPACE: cloud-vision
  KUBECONFIG: cluster.json
  
  GCLOUD_CLI_VERSION: 387.0.0
  CLOUDSDK_CONFIG: /cache/gcloud/config

  GCR_HOST: gcr.io
  PROJECT_ID: forestvpn
  IMAGE_NAME: cloud-vision

services:
  - name: docker
    image: docker:20.10.16-dind-alpine3.15
    privileged: true
    volumes:
      - name: dockersock
        path: /var/run

steps:
  - name: setup
    image: alpine:3.15
    volumes:
      - name: cache
        path: /cache
    commands:
      - echo $${DRONE_TAG:-$${DRONE_COMMIT:0:8}} > /cache/.build_version
      - echo $${GCR_HOST}/$${PROJECT_ID}/$${IMAGE_NAME}:`cat /cache/.build_version` > /cache/.image_tag
  
  - name: docker ready
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
    commands:
      - apk add --no-cache docker
      - |
        until docker info > /dev/null 2>&1; do
          echo "Docker is not ready, sleep 1 second"
          sleep 1
        done

  - name: setup gcloud
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
      - name: cache
        path: /cache
    environment:
      GCLOUD_CREDENTIALS:
        from_secret: GCLOUD_CREDENTIALS
    commands:
      - mkdir -p $${CLOUDSDK_CONFIG}
      - apk add --no-cache curl python3 docker rsync
      - curl -L -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-$${GCLOUD_CLI_VERSION}-linux-x86_64.tar.gz
      - tar -xf google-cloud-cli-$${GCLOUD_CLI_VERSION}-linux-x86_64.tar.gz -C /cache/
      - /cache/google-cloud-sdk/install.sh -q --usage-reporting=false --screen-reader=false
      - export PATH=/cache/google-cloud-sdk/bin:$PATH
      - echo $GCLOUD_CREDENTIALS > gcloud_credentials.json
      - gcloud auth login --no-browser --cred-file gcloud_credentials.json --project $PROJECT_ID --quiet
      - gcloud auth configure-docker --quiet $${OCI_HOST},$${GCR_HOST}
      - rsync -a ~/.docker/ /cache/.docker
  
  - name: build image
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
      - name: cache
        path: /cache
    commands:
      - export PATH=/cache/google-cloud-sdk/bin:$PATH
      - apk add --no-cache curl python3 docker rsync
      - /cache/google-cloud-sdk/install.sh -q --usage-reporting=false --screen-reader=false
      - rsync -a /cache/.docker/ ~/.docker
      - |
        docker manifest inspect `cat /cache/.image_tag` || \
        docker build --build-arg ENVIRONMENT=staging -t `cat /cache/.image_tag` .
    depends_on:
      - setup
      - setup gcloud
      - docker ready
  
  - name: publish image
    image: alpine:3.15
    volumes:
      - name: dockersock
        path: /var/run
      - name: cache
        path: /cache
    commands:
      - export PATH=/cache/google-cloud-sdk/bin:$PATH
      - apk add --no-cache curl python3 docker rsync
      - /cache/google-cloud-sdk/install.sh -q --usage-reporting=false --screen-reader=false
      - rsync -a /cache/.docker/ ~/.docker
      - |
        docker manifest inspect `cat /cache/.image_tag` || \
        docker push `cat /cache/.image_tag`
    depends_on:
      - setup
      - setup gcloud
      - build image
  
  - name: deploy
    image: alpine:3.15
    volumes:
      - name: cache
        path: /cache
    environment:
      KUBECONFIG_JSON:
        from_secret: K8S_DEV_KUBECONFIG
    commands:
      - apk add --no-cache curl
      - curl -LO "https://dl.k8s.io/release/v$${K8S_VERSION}/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - echo $KUBECONFIG_JSON > $KUBECONFIG
      - kubectl -n $K8S_NAMESPACE set image deployment/webapp app="`cat /cache/.image_tag`"
      - kubectl -n $K8S_NAMESPACE rollout status -w deployment/webapp
    depends_on:
      - setup
      - publish image
  
  - name: slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: SLACK_RELEASE_WEBHOOK
      link_names: true
      icon_url: https://unsplash.it/256/256/?random
      template: >
        {{#success build.status}}
          ✔ The {{ repo.owner }}/{{ repo.name }} <{{ build.link }}| release {{ build.number }} ↗> deploy to staging is succeed!! Thanks @{{build.author}}
        {{else}}
         :x: The {{ repo.owner }}/{{ repo.name }} <{{ build.link }}| release {{ build.number }} ↗> deploy to staging is failed! Blame @{{build.author}}
        {{/success}}
    when:
      status: [ success, failure ]
    depends_on:
      - deploy

---
kind: pipeline
type: docker
name: "rollback: staging"

trigger:
  event:
    - rollback
  target:
    - staging

environment:
  K8S_VERSION: 1.24.1
  K8S_NAMESPACE: cloud-vision
  KUBECONFIG: cluster.json

steps:
  - name: rollback
    image: alpine:3.15
    environment:
      KUBECONFIG_JSON:
        from_secret: K8S_DEV_KUBECONFIG
    commands:
      - apk add --no-cache curl
      - curl -LO "https://dl.k8s.io/release/v$${K8S_VERSION}/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - echo $KUBECONFIG_JSON > $KUBECONFIG
      - kubectl -n $K8S_NAMESPACE rollout undo deployment/webapp
      - kubectl -n $K8S_NAMESPACE rollout status -w deployment/webapp

  - name: slack
    image: plugins/slack
    settings:
      webhook:
        from_secret: SLACK_RELEASE_WEBHOOK
      link_names: true
      icon_url: https://unsplash.it/256/256/?random
      template: >
        {{#success build.status}}
          ✔ The {{ repo.owner }}/{{ repo.name }} <{{ build.link }}| release {{ build.number }} ↗> rollback on staging is succeed!! Thanks @{{build.author}}
        {{else}}
         :x: The {{ repo.owner }}/{{ repo.name }} <{{ build.link }}| release {{ build.number }} ↗> rollback on staging is failed! Blame @{{build.author}}
        {{/success}}
    when:
      status: [ success, failure ]
    depends_on:
      - rollback